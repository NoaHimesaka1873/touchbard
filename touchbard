#!/usr/bin/python
# SPDX-License-Identifier: GPL-3.0
# Copyleft 2023 Noa Himesaka. Some rights reserved.

import socket
import struct
import os, os.path
import json
import signal
import configparser
from glob import glob
from pathlib import Path

# check if __main__ is the name of the current module and exit if not
if __name__ != "__main__":
    exit(1)

# exit if not running as root
if os.geteuid() != 0:
    print("Touchbar Daemon must be run as root")
    exit(1)

# check whether fnmode file exists
doesFnmodeExist = False
paths = [Path(p) for p in glob("/sys/class/input/*/device/fnmode")]
for path in paths:
    if path.exists():
        doesFnmodeExist = True
        continue
if not doesFnmodeExist:
    print(
        "Touchbar Daemon cannot find fnmode file. Check whether apple-touchbar kernel module is loaded."
    )
    exit(1)

# This is the path to the socket file that Touchbar Daemon creates
SOCKET_PATH = "/run/touchbard/touchbard.sock"

# This is the path to the PID file that Touchbar Daemon creates
PID_PATH = "/run/touchbard/touchbard.pid"

# This is the path to the configuration file that Touchbar Daemon uses
CONFIG_PATH = "/etc/touchbard.conf"

# check if touchbard is running
if os.path.exists(PID_PATH):
    with open(PID_PATH, "r") as pid_file:
        pid = pid_file.read()
        if not os.path.exists("/proc/" + pid):
            print(
                "Touchbar Daemon is not running, but PID file exists, indicating a previous crash. Removing remaining files..."
            )
            try:
                os.remove(PID_PATH)
            except:
                # do nothing
                pass
            try:
                os.remove(SOCKET_PATH)
            except:
                # do nothing
                pass
        else:
            print("Touchbar Daemon is already running")
            exit(1)

# create /run/touchbard
if not os.path.exists("/run/touchbard"):
    os.makedirs("/run/touchbard")


# Gracefully exit on SIGTERM or SIGINT
def signal_handler(signal, frame) -> None:
    global server
    print("Touchbar Daemon is shutting down...")
    server.close()
    os.remove(SOCKET_PATH)
    os.remove(PID_PATH)
    print("Touchbar Daemon has shut down.")
    exit()


# set up signal handler
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

# Write PID file
with open(PID_PATH, "w") as f:
    f.write(str(os.getpid()))

print("Touchbar Daemon is starting...")
# Delete socket file if it exists
if os.path.exists(SOCKET_PATH):
    os.remove(SOCKET_PATH)


# function for reading fnmode
def read(key: str) -> dict:
    # check for possible fnmode locations
    paths = [Path(p) for p in glob(f"/sys/class/input/*/device/{key}")]
    for path in paths:
        # if it's there, read from it
        if path.exists():
            try:
                with path.open("r") as f:
                    # read fnmode
                    value = f.read().strip("\n")
                    # send and print success message
                    return {
                        "status": "SUCCESS",
                        "message": f"Successfully read {value} from {key}",
                        "value": value,
                    }
            except:
                return {
                    "status": "ERROR",
                    "message": f"Read error: Could not read from {key}",
                }
    return {
        "status": "ERROR",
        "message": f"Read error: Could not find {key} file",
    }


# function for writing fnmode
def write(key: str, value: int) -> dict:
    # check for possible fnmode locations
    paths = [Path(p) for p in glob(f"/sys/class/input/*/device/{key}")]
    for path in paths:
        # if it's there, write to it
        if path.exists():
            try:
                with path.open("w") as f:
                    # write value
                    f.write(str(value))
                    # send and print success message
                    return {
                        "status": "SUCCESS",
                        "message": f"{key} set successfully to {value}",
                        "value": value,
                    }
            except:
                return {
                    "status": "ERROR",
                    "message": "Write error: Could not write to {key} file",
                }
    return {
        "status": "ERROR",
        "message": f"Write error: Could not find {key} file",
    }


# function for reading from config file
def readFromConfig(key: str) -> dict:
    config = configparser.ConfigParser()
    try:
        config.read(CONFIG_PATH)
    except:
        return {"status": "ERROR", "message": "Could not read configuration file"}
    if not "DEFAULT" in config:
        return {
            "status": "ERROR",
            "message": "Config file is missing [DEFAULT] section",
        }
    if not key in config["DEFAULT"]:
        return {
            "status": "ERROR",
            "message": f"Config file is missing {key} option in [DEFAULT] section",
        }
    try:
        return {
            "status": "SUCCESS",
            "message": f"successfully read {int(config['DEFAULT'][key])} from {key} in config file",
            "value": int(config["DEFAULT"][key]),
        }
    except ValueError:
        return {
            "status": "ERROR",
            "message": f"Config file contains invalid {key} value",
        }


# function for sending and printing fnmode
def printAndSendResult(result, conn=None) -> bool:
    print(f"{result['status']}: {result['message']}")
    if conn is None:
        return True
    try:
        conn.send(json.dumps(result).encode("UTF-8"))
    except:
        return False
    return True


# read config file and apply values from config file
for key in ["fnmode", "idle_timeout", "dim_timeout"]:
    result = readFromConfig(key)
    printAndSendResult(result, None)
    if result["status"] == "ERROR":
        exit(1)
    result = write(key, int(result["value"]))
    printAndSendResult(result, None)
    if result["status"] == "ERROR":
        exit(1)


# function for check whether value is valid
def checkData(data: dict) -> bool:
    try:
        if int(data["version"]) != 2:
            return False
        if "key" not in data:
            return False
        if data["operation"] not in ["read", "readcfg", "writecfg", "write"]:
            return False
        if data["operation"] in ["writecfg", "write"] and "value" not in data:
            return False
        if data["key"] in ["fnmode", "idle_timeout", "dim_timeout"] and data[
            "operation"
        ] in ["read", "readcfg"]:
            return True
        match data["key"]:
            case "fnmode":
                if int(data["value"]) in range(5) or data["operation"] == "read":
                    return True
                else:
                    return False
            case "idle_timeout" | "dim_timeout":
                if int(data["value"]) >= -2 or data["operation"] == "read":
                    return True
                else:
                    return False
            case _:
                return False
    except:
        return False


# function for writing data to config file
def writeToConfig(key: str, value: str) -> dict:
    config = configparser.ConfigParser()
    config.read(CONFIG_PATH)
    config["DEFAULT"][key] = value
    try:
        with open(CONFIG_PATH, "w") as f:
            config.write(f)
        return {
            "status": "SUCCESS",
            "message": f"Successfully wrote {value} to {key} in config file",
        }
    except:
        return {"status": "ERROR", "message": f"Could not write to config file"}


# Open socket
server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
server.bind(SOCKET_PATH)

# set folder and file permission
os.chmod("/run/touchbard", 0o755)
os.chmod(SOCKET_PATH, 0o666)
os.chmod(PID_PATH, 0o600)

# Run main loop until SIGTERM or SIGINT is received
while True:
    server.listen(1)
    conn, addr = server.accept()
    # Get UID of socket client
    creds = conn.getsockopt(
        socket.SOL_SOCKET, socket.SO_PEERCRED, struct.calcsize("3i")
    )
    pid, uid, gid = struct.unpack("3i", creds)
    # Read data from socket, decode it, and load it as JSON
    rawjson = conn.recv(1024).decode("UTF-8")
    # Variable for checking whether pipe is still open
    isPipeOpen = True
    try:
        # try to load JSON
        data = json.loads(rawjson)
        if data["fnmode"] == "read":
            result = read("fnmode")
            if result["status"] != "ERROR":
                result["message"] = str(result["value"])
            isPipeOpen = printAndSendResult(result, conn)
        elif data["fnmode"] == 9:
            # protocol v2 stuff
            isValid = checkData(data)
            if isValid:
                match data["operation"]:
                    case "read":
                        result = read(data["key"])
                        isPipeOpen = printAndSendResult(result, conn)
                    case "write":
                        result = write(data["key"], int(data["value"]))
                        isPipeOpen = printAndSendResult(result, conn)
                    case "readcfg":
                        result = readFromConfig(data["key"])
                        isPipeOpen = printAndSendResult(result, conn)
                    case "writecfg":
                        if uid == 0:
                            result = writeToConfig(data["key"], str(data["value"]))
                        else:
                            result = {
                                "status": "ERROR",
                                "message": "You must be root to write to config",
                            }
                        isPipeOpen = printAndSendResult(result, conn)
            else:
                error = {"status": "ERROR", "message": "Invalid data"}
                isPipeOpen = printAndSendResult(error, conn)

        elif int(data["fnmode"]) in range(5):
            result = write("fnmode", int(data["fnmode"]))
            isPipeOpen = printAndSendResult(result, conn)
    except json.decoder.JSONDecodeError:
        # if payload is not valid JSON, send and print error message
        error = {
            "status": "ERROR",
            "message": "Invalid JSON: payload is not valid JSON",
        }
        isPipeOpen = printAndSendResult(error, conn)
    except ValueError:
        # if fnmode is not an integer or not "read", send and print error message
        error = {
            "status": "ERROR",
            "message": 'Invalid fnmode: fnmode must be an integer between 0 and 4, 9 for Protocol V2+, or "read" to read the current fnmode.',
        }
        isPipeOpen = printAndSendResult(error, conn)
    # Check if connection was broken and print warning if it was
    if not isPipeOpen:
        print("WARNING: Connection to client was closed before response could be sent")
    conn.close()
